<%- include('layouts/main') %>
<div class="flex-grow flex-col flex p-4 h-screen max-h-screen w-full mx-auto" style="max-width: 85%;">
  <div id="chat-container" class="flex-1 flex-shrink-0 overflow-y-auto p-4 space-y-4 bg-gray-900">
    <% chat.messages.forEach((message, index)=> { %>
      <div
        class="message <%= message.role === 'user' ? 'user-message' : 'assistant-message' %> <%= message.role === 'system' ? 'system-message' : '' %> w-full mx-auto">
        <div class="flex items-start">
          <div class="w-10 h-10 rounded-full flex items-center justify-center 
                  <%= message.role === 'user' ? 'bg-blue-900 text-blue-200' : 
                    (message.role === 'system' ? 'bg-gray-700 text-gray-300' : 'bg-green-900 text-green-200') %>">
            <%= message.role==='user' ? 'U' : (message.role==='system' ? 'S' : 'A' ) %>
          </div>
          <div class="ml-3 bg-gray-800 rounded-lg p-4 shadow-md border border-gray-700 message-content w-full">
            
            <% if (message.role==='system' ) { %>
              <p class="text-sm text-gray-400 italic">System Prompt:</p>
            <% } %>
            <div class="prose prose-invert max-w-none markdown-content text-gray-300">
              <%- marked.parse(message.content) %>
            </div>
          </div>
        </div>
      </div>
      <% }) %>
  </div>

  <div class="p-2">
    <form id="chat-form" class="flex space-x-2 relative">    
          <div id="settings-menu" class="hidden absolute bottom-full mb-2 bg-gray-800 shadow-lg rounded p-4 w-50">
          <p class="text-sm text-gray-400 mb-2"><%= chat.model %></p>
          <button id="edit-btn" type="button" class="block w-full text-left px-3 py-1 text-gray-200 hover:bg-gray-700 rounded">Edit</button>
          <button id="delete-btn" type="button" class="block w-full text-left px-3 py-1 text-red-200 hover:bg-red-800 rounded">Delete</button>
        </div>

        <button id="settings-btn" type="button" class="p-2 bg-gray-800 text-gray-100 border border-gray-700 rounded">⚙️</button> 
        <textarea id="message-input" class="flex-1 bg-gray-800 text-gray-100 border border-gray-700 rounded p-2 focus:outline-none w-full h-11" placeholder="Type your message..."></textarea>
        <button type="submit" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded transition">Send</button>
    </form>
  </div>
</div>

<script>
  document.getElementById("settings-btn").addEventListener("click", function () {
    document.getElementById("settings-menu").classList.toggle("hidden");
  });

  document.addEventListener("click", function (event) {
    if (!event.target.closest("#settings-btn")) {
      document.getElementById("settings-menu").classList.add("hidden");
    }
  });

  </script>


  <!-- Edit Chat Modal -->
  <div id="edit-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-10">
    <div class="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-md border border-gray-700">
      <h2 class="text-xl font-bold mb-4 text-blue-300">Edit Chat</h2>
      <form id="edit-form">
        <div class="mb-4">
          <label class="block text-gray-300 mb-2" for="edit-title">Chat Title:</label>
          <input type="text" id="edit-title"
            class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500"
            value="<%= chat.title %>">
        </div>
        <div class="mb-4">
          <label class="block text-gray-300 mb-2" for="edit-model">Model:</label>
          <select id="edit-model"
            class="w-full p-2 bg-gray-700 border border-gray-600 rounded text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
            <% models.forEach(model=> { %>
              <option value="<%= model.name %>" <%=chat.model===model.name ? 'selected' : '' %>><%= model.name %>
              </option>
              <% }) %>
          </select>
        </div>
        <div class="flex justify-end space-x-2">
          <button type="button" id="cancel-edit"
            class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-gray-200 rounded transition">Cancel</button>
          <button type="submit" id="save-edit"
            class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition">Save</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="delete-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden z-10">
    <div class="bg-gray-800 p-6 rounded-lg shadow-lg w-full max-w-md border border-gray-700">
      <h2 class="text-xl font-bold mb-4 text-red-400">Delete Chat</h2>
      <p class="mb-4 text-gray-300">Are you sure you want to delete this chat? This action cannot be undone.</p>
      <div class="flex justify-end space-x-2">
        <button type="button" id="cancel-delete"
          class="px-4 py-2 bg-gray-600 hover:bg-gray-500 text-gray-200 rounded transition">Cancel</button>
        <button type="button" id="confirm-delete"
          class="px-4 py-2 bg-red-700 hover:bg-red-800 text-white rounded transition">Delete</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js"></script>
  <script>

  document.addEventListener('DOMContentLoaded', () => {
    const chatId = '<%= chat._id %>';
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message-input');
    const chatContainer = document.getElementById('chat-container');
    const editBtn = document.getElementById('edit-btn');
    const deleteBtn = document.getElementById('delete-btn');
    const editModal = document.getElementById('edit-modal');
    const deleteModal = document.getElementById('delete-modal');
    const cancelEdit = document.getElementById('cancel-edit');
    const saveEdit = document.getElementById('save-edit');
    const cancelDelete = document.getElementById('cancel-delete');
    const confirmDelete = document.getElementById('confirm-delete');
    const editForm = document.getElementById('edit-form');

    // Configure marked for dark mode
    marked.setOptions({
      breaks: true,
      gfm: true,
      headerIds: false,
      sanitize: true
    });

    // Process markdown in chat messages
    document.querySelectorAll('.markdown-content').forEach(el => {
      // el.innerHTML = marked.parse(el.textContent);
      el.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });
    });

    // Scroll to bottom of chat
    chatContainer.scrollTop = chatContainer.scrollHeight;

    function addMessageToUI(role, content) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message ${role === 'user' ? 'user-message' : 'assistant-message'}`;

      messageDiv.innerHTML = `
      <div class="flex items-start">
        <div class="w-10 h-10 rounded-full flex items-center justify-center ${role === 'user' ? 'bg-blue-900 text-blue-200' : 'bg-green-900 text-green-200'}">
          ${role === 'user' ? 'U' : 'A'}
        </div>
        <div class="ml-3 bg-gray-800 rounded-lg p-4 shadow-md border border-gray-700 message-content w-full">
          <div class="prose prose-invert max-w-none markdown-content text-gray-300">
            ${marked.parse(content)}
          </div>
        </div>
      </div>
    `;

      chatContainer.appendChild(messageDiv);

      // Highlight code blocks
      messageDiv.querySelectorAll('pre code').forEach((block) => {
        hljs.highlightElement(block);
      });

      // Scroll to bottom
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }

    async function submitMessage() {
      const message = messageInput.value.trim();
      if (!message) return;

      addMessageToUI('user', message);
      messageInput.value = '';

      const response = await fetch(`/chat/${chatId}/message`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message }),
      });

      if (!response.ok) {
        console.error("Failed to send message:", await response.text());
        return;
      }

      const eventSource = new EventSource(`/chat/${chatId}/stream`);

      let assistantMessage = '';

      eventSource.onmessage = (event) => {
        const data = JSON.parse(event.data);
        
        if (data.error) {
          console.error('Error:', data.error);
          eventSource.close();
          return;
        }

        if (event.data === '[DONE]') {
          eventSource.close();
          return;
        }

        assistantMessage += data.message.content;
        updateLastMessage(assistantMessage);
      };

      eventSource.onerror = () => {
        eventSource.close();
      };
    }


    function updateLastMessage(content) {
      const lastMessage = document.querySelector('.assistant-message:last-child .markdown-content');
      if (lastMessage) {
        lastMessage.innerHTML = marked.parse(content);
      } else {
        addMessageToUI('assistant', content);
      }
    }

    messageInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault(); // Prevent default form submission
        submitMessage();
      } else if (e.key === 'Enter' && e.shiftKey) {
        e.preventDefault();
        messageInput.value += '\n';
      }
    });    

    chatForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      submitMessage();
    });

    // Allow Shift+Enter for new lines in the textarea
    messageInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter' && !e.shiftKey) {
        submitMessage();
        
        
      }
      if (e.key === 'Enter' && e.shiftKey) {
        e.preventDefault();
        messageInput.value += '\n';
      }
    });

    // Edit chat
    editBtn.addEventListener('click', () => {
      editModal.classList.remove('hidden');
    });

    cancelEdit.addEventListener('click', () => {
      editModal.classList.add('hidden');
    });

    saveEdit.addEventListener('click', () => {
      editModal.classList.add('hidden');
    });

    editForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const title = document.getElementById('edit-title').value;
      const model = document.getElementById('edit-model').value;

      try {
        const response = await fetch(`/chat/${chatId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ title, model })
        });

        const data = await response.json();

        if (data.success) {
          document.getElementById('chat-title').textContent = title;
          document.getElementById('current-model').textContent = model;
          editModal.classList.add('hidden');
        } else {
          console.error('Error:', data.error);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    });

    // Delete chat
    deleteBtn.addEventListener('click', () => {
      deleteModal.classList.remove('hidden');
    });

    cancelDelete.addEventListener('click', () => {
      deleteModal.classList.add('hidden');
    });

    confirmDelete.addEventListener('click', async () => {
      try {
        const response = await fetch(`/chat/${chatId}`, {
          method: 'DELETE'
        });

        const data = await response.json();

        if (data.success) {
          window.location.href = '/';
        } else {
          console.error('Error:', data.error);
        }
      } catch (error) {
        console.error('Error:', error);
      }
    });
  });
</script>